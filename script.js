'use strict';

(function () {
  // –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∂–∏-–∏–∫–æ–Ω–æ–∫ –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞–Ω–æ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∏–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const EMOJIES = ['üê∂','üê±','üê≠','üêπ','üê∞','üêª','üêº','üê®','üêØ','ü¶Å','üêÆ','üê∑','üê∏','üêô','üêµ','ü¶Ñ','üêû','ü¶Ä','üêü','üêä','üêì','ü¶É'];

  // –≤—Ä–µ–º—è –∏–≥—Ä—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  const TIMEOUT = 60;

  /**
   * –ö–ª–∞—Å—Å –∫–∞—Ä—Ç–æ—á–∫–∏
   */
  class Card {
    elem = null;
    emoji = null;
    state = {
      turned: false,
      success: false,
      failed: false
    };

    /**
     * @param {HTMLElement} elem - DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     * @param {string} emoji - —Å–∏–º–≤–æ–ª —ç–º–æ–¥–∂–∏-–∏–∫–æ–Ω–∫–∏
     * @constructor
     */
    constructor(elem, emoji) {
      this.elem = elem;
      this.emoji = emoji;
      this.elem.querySelector('.back').textContent = this.emoji;
      this.render();
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
     * @param {Object} state
     * @param {boolean} state.turned - –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞
     * @param {boolean} state.success - —É—Å–ø–µ—à–Ω–æ —É–≥–∞–¥–∞–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (–ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ 2-—Ö –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫)
     * @param {boolean} state.failed - –Ω–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ (–ø—Ä–∏ –æ—Ç—Ä–∫—Ä—ã—Ç–∏–∏ 2-—Ö —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫)
     */
    setState(state) {
      this.state = {
        ...this.state,
        ...state
      };
      if (!this.state.turned) {
        this.state.failed = false;
        this.state.success = false;
      }
      this.render();
    }

    render() {
      this.elem.classList.toggle('success', this.state.success);
      this.elem.classList.toggle('failed', this.state.failed);
      this.elem.classList.toggle('turned', this.state.turned);
    }

    /**
     * –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É
     */
    turn() {
      this.setState({turned: !this.state.turned});
    }
  }

  /**
   * –ö–ª–∞—Å—Å —Ç–∞–π–º–µ—Ä–∞
   */
  class Timer {
    timeout = 60;
    interval = null;
    timeleft = null;
    timerElement = null;
    started = false;

    constructor(timerElement, timeout) {
      this.timerElement = timerElement;
      this.timeout = timeout;
    }

    start(timeoutCallback) {
      this.reset();
      this.interval = setInterval(() => {
        this.timeleft--;
        this.render();
        if (this.timeleft === 0) {
          this.stop();
          timeoutCallback();
        }
      }, 1000);
      this.render();
      this.started = true;
    }

    stop() {
      clearInterval(this.interval);
      this.interval = null;
      this.started = false;
    }

    reset() {
      this.timeleft = this.timeout;
      this.started = false;
      this.render();
    }

    render() {
      this.timerElement.textContent = this.formatTime(this.timeleft);
    }

    formatTime(seconds) {
      let minutes = Math.floor(seconds / 60);
      seconds = seconds % 60;
      minutes = minutes < 10 ? '0' + minutes : minutes;
      seconds = seconds < 10 ? '0' + seconds : seconds;
      return `${minutes}:${seconds}`;
    }
  }

  /**
   * –ö–ª–∞—Å—Å –∏–≥—Ä—ã
   */
  class Memoji {
    emojies = null;
    elems = null;
    cards = null;
    container = null;
    timer = null;
    popup = null;

    constructor(container, emojies, timeout) {
      this.container = container;
      this.popup = this.container.querySelector('.popup');
      this.elems = this.container.querySelectorAll('.card');
      this.emojies = emojies;
      this.timer = new Timer(this.container.querySelector('.timer'), timeout);
      this._addEventListeners();
      this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∫–∞—Ä—Ç–∏–Ω–æ–∫
     */
    init() {
      let randomEmojies = Memoji.getRandomEmojies(this.emojies, this.elems.length / 2);
      this.cards = Array.from(this.elems).map(elem => new Card(elem, randomEmojies.shift()));
      this.timer.reset();
      this.lastTurnedCard = null;
    }

    showPopup(win = false) {
      this.popup.querySelector('.popup__text').innerHTML = this._getPopupText(win);
      this.popup.querySelector('.popup__button').textContent = win ? 'Play again' : 'Try again';
      this.popup.style.display = 'block';
    }

    _getPopupText(win) {
      let text = win ? 'Win' : 'Lose';
      return text.split('').map(char => `<span>${char}</span>`).join('');
    }

    closePopup() {
      this.popup.style.display = 'none';
    }

    _onCardClick(elem) {
      if (!this.timer.started) {
        this.timer.start(this.showPopup.bind(this));
      }

      let card = this._getCardByElem(elem);

      if (card.state.turned) return;

      card.turn();
      this._turnFailedCards();

      // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∞
      if (this.lastTurnedCard) {
        // –∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –¥—Ä—É–≥–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
        if (card !== this.lastTurnedCard) {
          if (this.lastTurnedCard.emoji === card.emoji) {
            // –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å–æ–≤–ø–∞–¥–∞—é—Ç
            card.setState({success: true});
            this.lastTurnedCard.setState({success: true});

          } else {
            // –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
            card.setState({failed: true});
            this.lastTurnedCard.setState({failed: true});
          }
        }
        this.lastTurnedCard = null;
      } else {
        // –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–µ—Ä–≤—É—é –æ—Ç–∫—Ä—ã—Ç—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        this.lastTurnedCard = card;
      }

      if (this.cards.every(card => card.state.success)) {
        this.timer.stop();
        this.showPopup(true);
      }
    }

    _turnFailedCards() {
      this.cards.forEach(card => {
        if (card.state.failed) card.turn();
      })
    }

    _getCardByElem(elem) {
      return this.cards.filter(card => {
        return card.elem === elem;
      })[0];
    }

    _addEventListeners() {
      this.container.addEventListener('click', this._onContainerClick.bind(this));
      this.popup.querySelector('.popup__button').addEventListener('click', () => {
        this.closePopup();
        this.init();
      });
    }

    _onContainerClick(event) {
      let target = event.target;

      // —Ü–∏–∫–ª –¥–≤–∏–≥–∞–µ—Ç—Å—è –≤–≤–µ—Ä—Ö –æ—Ç target –∫ —Ä–æ–¥–∏—Ç–µ–ª—è–º –¥–æ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä—ã
      while (target !== this.container) {
        if (target.classList.contains('card')) {
          // –Ω–∞—à–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É
          this._onCardClick(target);
          return;
        }
        target = target.parentNode;
      }
    }

    static getRandomEmojies(emojies, count) {
      emojies = emojies.slice();
      let result = [];

      for(let i = 0; i < count; i++) {
        let randomIndex = Math.floor(Math.random() * emojies.length);
        let randomEmoji = emojies[randomIndex];

        emojies.splice(randomIndex, 1);

        result.push(randomEmoji, randomEmoji);
      }

      return shuffleArray(result);
    }
  }

  /**
   * –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
   * @param {Array} arr - –º–∞—Å—Å–∏–≤
   * @returns {Array}
   */
  function shuffleArray(arr) {
    return arr.sort((a, b) => {
      return Math.random() - 0.5;
    });
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–≥—Ä—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–µ
   */
  function start() {
    const container = document.getElementById('memoji');
    const memoji = new Memoji(container, EMOJIES, TIMEOUT);
  }

  start();
})();